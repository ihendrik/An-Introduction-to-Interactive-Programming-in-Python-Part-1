# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos=[WIDTH/2,HEIGHT/2]
    if(direction):
        ball_vel=[random.randrange(2, 4),-random.randrange(1, 3)]
    else:
        ball_vel=[-random.randrange(2, 4),-random.randrange(1, 3)]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1=0
    score2=0
    paddle1_pos=HEIGHT/2-HALF_PAD_HEIGHT
    paddle2_pos=HEIGHT/2-HALF_PAD_HEIGHT
    paddle1_vel=0
    paddle2_vel=0
    spawn_ball(random.choice([LEFT,RIGHT]))
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if (ball_pos[1])<=BALL_RADIUS: ball_vel[1] *=-1#top
    elif(ball_pos[1]+1+BALL_RADIUS)>=HEIGHT: ball_vel[1] *=-1#bottom
    #if(ball_pos[0]+BALL_RADIUS)>=WIDTH-PAD_WIDTH: spawn_ball(LEFT);score1+=1;#right
    #elif(ball_pos[0])<=BALL_RADIUS+PAD_WIDTH: spawn_ball(RIGHT);score2+=1;#left
    if(ball_pos[0]+BALL_RADIUS)>=WIDTH-HALF_PAD_WIDTH: spawn_ball(LEFT);score1+=1;#right
    elif(ball_pos[0])<=BALL_RADIUS+HALF_PAD_WIDTH: spawn_ball(RIGHT);score2+=1;#left
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS,2,"White","White")
    
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos+= paddle1_vel
    paddle2_pos+= paddle2_vel
    if(paddle1_pos<=0): paddle1_pos=0
    elif(paddle1_pos>=HEIGHT-PAD_HEIGHT): paddle1_pos=HEIGHT-PAD_HEIGHT
    if(paddle2_pos<=0): paddle2_pos=0
    elif(paddle2_pos>=HEIGHT-PAD_HEIGHT): paddle2_pos=HEIGHT-PAD_HEIGHT

   # draw paddles
    canvas.draw_polygon([(0,paddle2_pos),(0,paddle2_pos+PAD_HEIGHT)],PAD_WIDTH*2,"White")
    canvas.draw_polygon([(WIDTH,paddle1_pos),(WIDTH,paddle1_pos+PAD_HEIGHT)],PAD_WIDTH*2,"White")
    # determine whether paddle and ball collide    
    if(((ball_pos[0]+BALL_RADIUS)>=WIDTH-PAD_WIDTH)and (ball_pos[1]>=paddle1_pos and ball_pos[1]<=paddle1_pos+PAD_HEIGHT)):
        ball_vel[0] *=-1.2
    elif((ball_pos[0])<=BALL_RADIUS+PAD_WIDTH and (ball_pos[1]>=paddle2_pos and ball_pos[1]<=paddle2_pos+PAD_HEIGHT)):
        ball_vel[0] *=-1.2
    
    # draw scores
    canvas.draw_text(str(score1),(WIDTH/4,HEIGHT/4),64,"Red")
    canvas.draw_text(str(score2),(WIDTH-WIDTH/4,HEIGHT/4),64,"Red")
        
def keydown(key):
    global paddle1_vel, paddle2_vel, paddle1_pos, paddle2_pos
    if key == simplegui.KEY_MAP["up"]:
         paddle1_vel -=5
    elif key == simplegui.KEY_MAP["down"]:
         paddle1_vel +=5
    elif key == simplegui.KEY_MAP["w"]:
         paddle2_vel -=5
    elif key == simplegui.KEY_MAP["s"]:
         paddle2_vel +=5
                                
    
def keyup(key):
    global paddle1_vel, paddle2_vel, paddle1_pos, paddle2_pos
    paddle1_vel=0
    paddle2_vel=0


    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button = frame.add_button("Restart",new_game)

# start frame
new_game()
frame.start()
